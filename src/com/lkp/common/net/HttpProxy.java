package com.lkp.common.net;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.io.UnsupportedEncodingException;import java.net.HttpURLConnection;import java.net.InetSocketAddress;import java.net.Proxy;import java.net.URL;import java.net.URLConnection;import java.net.URLEncoder;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Random;import java.util.regex.Matcher;import java.util.regex.Pattern;import java.util.zip.GZIPInputStream;import javax.net.ssl.HttpsURLConnection;import javax.net.ssl.SSLContext;import javax.net.ssl.TrustManager;import org.apache.http.HttpHost;import net.sf.json.JSONObject; public class HttpProxy {	 	private static String zhPattern = "[/u4e00-/u9fa5]+";	private static Proxy proxy ;  	public static String cookie = "";	public static String sessionid = "";	public static Map<String,List<String>> headers = null;	public static String[] ips = {"139.129.133.235:3000"};//		{"115.159.126.103","123.206.194.143","115.159.29.75","119.29.241.205","119.29.242.109","119.29.244.218",//			"119.29.245.126","119.29.244.202","119.29.245.69","119.29.245.90","119.29.245.193","123.206.198.232","123.206.199.136","123.206.198.188","115.29.165.122"};//			,"119.29.244.218","119.29.245.126","119.29.244.202","119.29.245.69","119.29.245.193","119.29.245.90"//			,"123.206.199.136","123.206.198.232","123.206.198.188","115.29.165.122","115.159.126.103"};	public static String[] ips2 = {"119.29.245.90:10001","119.29.244.218:10001","139.129.133.235:3000","103.19.16.6:9080","103.19.16.6:5061","147.75.208.108:18245","101.200.167.178:8098","147.75.208.105:18245","12.163.79.167:8000","104.238.147.85:9090","147.75.208.32:18245","147.75.208.112:18245","147.75.208.28:18245","147.75.208.49:18245","147.75.208.46:27017","104.131.159.210:25","115.29.165.122:10001","147.75.208.14:18245","107.190.131.229:443","147.75.208.56:18245","147.75.208.22:27017","147.75.208.59:18245","147.75.208.18:27017","147.75.208.38:18245","147.75.208.67:27017","147.75.208.17:18245","108.166.171.207:81","147.75.208.50:18245","147.75.208.77:18245","147.75.208.98:18245","147.75.208.35:18245","147.75.208.82:27017","147.75.208.11:18245","147.75.208.74:18245","147.75.208.53:18245","107.23.196.79:80","147.75.208.99:27017","147.75.208.64:27017","147.75.208.1:27017","147.75.208.92:18245","147.75.208.88:18245","147.75.209.100:18245","147.75.209.22:27017","147.75.209.109:18245","147.75.209.106:18245","147.75.209.40:27017","147.75.209.71:18245","147.75.209.57:27017","147.75.209.14:18245","147.75.209.17:18245","147.75.209.11:18245","147.75.209.77:18245","147.75.209.4:27017","147.75.209.46:27017","147.75.209.92:18245","147.75.209.50:18245","147.75.209.95:18245","147.75.209.82:27017","152.157.4.42:800","147.75.209.98:18245","147.75.209.64:27017","147.75.209.7:27017","147.75.209.53:18245","169.204.214.155:8009","169.204.225.20:8009 ","221.178.251.168:8443","152.157.5.54:800","169.244.168.42:800","209.141.61.200:443","201.175.27.12:8000","213.106.146.183:80","207.82.125.6:8008","192.225.166.229:3389","199.230.110.145:25","45.32.39.209:25","198.199.172.6:8008","184.106.157.85:9191","192.110.165.245:8082","204.234.16.167:8008","192.225.166.240:3389","24.38.110.37:8009","38.96.13.176:8009","221.243.36.120:8081","37.58.160.69:8080","5.45.66.235:3100","5.45.68.77:3300","220.149.25.33:80","52.79.157.219:8082","52.79.88.62:443","54.154.47.213:443","54.155.254.205:7547","59.188.245.229:8001","52.79.117.191:443","52.69.246.243:8082","52.79.65.63:443","52.79.206.186:443","54.201.138.63:8083","52.37.236.173:8000","104.131.250.224:443","85.17.235.107:5000","64.79.217.109:2000","104.223.1.148:25","88.51.72.150:8080","87.224.12.189:8181","64.79.192.85:2000","93.63.139.210:8080","115.159.126.103:10001","119.29.244.202:10001","115.159.51.23:10001","115.182.220.22:5555","123.206.194.143:10001","123.206.199.136:10001","119.29.242.109:10001","119.29.245.69:10001","84.39.41.57:443","123.206.198.232:10001","120.27.97.159:443 ","119.9.95.217:32768","123.56.9.103:110","123.57.216.57:8098","123.56.199.102:8081","147.75.208.12:18245","147.75.208.103:18245","12.109.25.5:8009","147.75.208.13:27017","147.75.208.23:18245","147.75.208.33:18245","12.12.220.160:800","147.75.208.44:18245","146.185.26.244:90","147.75.208.26:18245","96.57.135.114:800","147.75.208.8:27017","147.75.208.51:18245","147.75.208.16:27017","147.75.208.86:18245","147.75.208.75:18245","147.75.208.19:27017","147.75.208.65:18245","147.75.208.72:18245","147.75.208.89:18245","147.75.208.62:27017","122.166.62.113:6000","147.75.208.41:27017","147.75.208.110:18245","147.75.208.5:27017","147.75.209.12:18245","143.50.129.174:8000","147.75.208.109:18245","147.75.208.54:18245","147.75.208.34:27017","147.75.208.68:18245","147.75.208.90:18245","147.75.208.93:18245","147.75.209.79:27017","95.130.156.10:3128","131.220.61.21:1723","147.75.209.54:18245","147.75.209.101:18245","147.75.209.104:18245","147.75.209.75:18245","147.75.209.16:27017","147.75.208.96:18245","147.75.209.68:18245","147.75.209.90:18245","147.75.209.65:18245","147.75.209.34:27017","147.75.209.89:18245","147.75.209.51:18245","147.75.209.55:27017","147.75.209.30:18245","147.75.209.44:18245","147.75.209.15:18245","162.216.121.210:25","147.75.209.37:27017","147.75.209.72:18245","159.203.65.196:49152","147.75.209.86:18245","151.236.18.22:1234","170.24.131.171:3128","192.119.205.90:800","176.31.252.219:8008","177.38.194.54:800","198.71.88.159:443","198.199.172.6:8009","169.244.168.143:800","199.230.110.146:25 ","190.12.72.30:8088","192.225.175.86:3389","186.216.206.6:9191","218.6.79.198:3128","206.128.191.77:8008","192.225.175.79:3389","192.225.166.211:3389","24.153.209.190:800","152.157.5.55:800","192.225.166.232:3389","204.234.189.1:8008","207.82.125.14:8008","194.47.172.50:8000","5.45.67.84:3100","206.169.217.66:8008","45.55.249.224:2222","54.213.223.218:8083","37.187.193.215:5000","40.134.132.44:9090","50.7.153.170:80","54.149.134.149:8083","5.45.66.224:3100","193.33.26.57:2323","54.153.127.129:8083","50.16.138.80:20000","37.59.115.232:23","51.254.82.219:444","54.153.98.123:8083","51.254.82.66:444","51.254.82.129:444","5.196.89.94:8181"};	public static String[] ips3 ={"106.187.88.47:80","104.131.250.224:443","104.223.1.148:25","106.185.44.175:102","101.201.66.210:80","106.187.88.47:80","111.13.129.31:81","111.13.129.35:85","111.13.129.34:84","106.186.27.14:80","104.236.10.127:5000"};		//{"139.129.133.235:3000","119.9.95.217:32768","119.90.126.106:777"};//,"108.166.171.207:81","37.140.198.185:7777","116.240.96.84:3128","37.140.198.176:7777","104.131.159.210:25","199.230.110.145:25","176.9.154.170:2222 ","5.45.66.235:3100","192.110.165.245:8082","12.163.79.167:8000","59.188.245.229:8001","115.182.220.22:5555","147.75.208.49:18245","147.75.208.46:27017","192.225.166.240:3389","209.141.61.200:443","147.75.208.22:27017","221.243.36.120:8081","147.75.208.67:27017","189.78.156.241:3128","147.75.208.28:18245","12.109.25.5:8009","147.75.208.75:18245","192.225.166.229:3389","147.75.209.92:18245","147.75.208.13:27017","147.75.209.82:27017","147.75.208.99:27017","147.75.208.65:18245","168.212.140.99:800","152.157.4.42:800","147.75.208.19:27017","147.75.208.56:18245","104.131.250.224:443","147.75.208.109:18245","147.75.208.110:18245","147.75.209.12:18245"};	public static String getResponseByGet(String url,String charset) {		if (url.toLowerCase().startsWith("http:")) {			return getHttpRequestContentByGet(url ,charset);		} else {			return getHttpsRequestContentByGet(url,charset);		}	}      	public static void setProxy(String proxyHost, String port) {		try{			if(port!=null&& !port.trim().equals("")){				System.out.println("set proxy ,host:"+proxyHost+"; port:"+port);				proxy = new Proxy(Proxy.Type.HTTP,   			            new InetSocketAddress(proxyHost, Integer.parseInt(port)));			}else{				proxy = null;			}		}catch(Exception e){			e.printStackTrace();		}					}	private static String getHttpRequestContentByGet(String url ,String charset) {		String returnBody = "";		try {			URL console = new URL(url);			HttpURLConnection conn = null;			if(proxy!=null){				conn = (HttpURLConnection) console						.openConnection(proxy);			}else{				conn = (HttpURLConnection) console						.openConnection();			}						conn.setRequestMethod("GET");						 	conn.setRequestProperty("Content-type",					"application/x-java-serialized-object"); //			conn.setConnectTimeout(FileUtil.getConnectTimeout());  //			conn.setReadTimeout(FileUtil.getReadTimeout());  			conn.connect(); 			InputStream is = conn.getInputStream();			 			BufferedReader reader = new BufferedReader(					new InputStreamReader(is,charset));			String curLine = "";			while ((curLine = reader.readLine()) != null) {				returnBody += curLine;			}			is.close(); 		} catch (Exception e) {			//System.out.println("errorrrrrrrrrrrrrrrr:  url:"+url+" : "+ e.getMessage());			 			//e.printStackTrace();		}		return returnBody;	}		  	private static String getHttpsRequestContentByGet(String url ,String charset) { 		System.out.println("in https get");		String returnbody = "";		try {			SSLContext sc = SSLContext.getInstance("SSL"); 			sc.init(null, new TrustManager[] { new TrustAnyTrustManager() },					new java.security.SecureRandom());			URL console = new URL(url);			HttpsURLConnection conn = (HttpsURLConnection) console					.openConnection();			conn.setSSLSocketFactory(sc.getSocketFactory());			conn.setHostnameVerifier(new TrustAnyHostnameVerifier());			conn.setRequestMethod("GET");			conn.setSSLSocketFactory(sc.getSocketFactory());			conn.setHostnameVerifier(new TrustAnyHostnameVerifier());			 			conn.setDoOutput(true); 			conn.setDoInput(true); 			conn.setUseCaches(false); 			conn.setRequestProperty("Content-type",					"application/x-java-serialized-object"); //			conn.setConnectTimeout(FileUtil.getConnectTimeout());  //			conn.setReadTimeout(FileUtil.getReadTimeout());  			 			conn.connect();			// conn. 			InputStream is = conn.getInputStream();			BufferedReader reader = new BufferedReader(					new InputStreamReader(is,charset));			String curLine = "";			while ((curLine = reader.readLine()) != null) {				returnbody += curLine;			}			is.close();		} catch (Exception e) { 		 		}		return returnbody;	}			public static String getHttpRequestContentByGet(String url ,Proxy proxy, Map<String,String> headParams) { 		//System.out.println("in http get");		String returnbody = "";		try {			URL console = new URL(url);			HttpURLConnection conn = null;			if(proxy!=null){				conn = (HttpURLConnection) console						.openConnection(proxy);			}else{				conn = (HttpURLConnection) console						.openConnection();			}						conn.setRequestMethod("GET");						 	setRequestParams(conn, headParams);			 				 	conn.setReadTimeout(6000);			 	conn.setConnectTimeout(6000);			conn.connect();			InputStream is = conn.getInputStream();					/*System.out.println("heads =" + conn.getHeaderFields());			for(Object value : conn.getHeaderFields().values()){				if(value.toString().contains("LGMOID")){					cookie = value.toString();					System.out.println("value="+value);				}			}*/						headers = conn.getHeaderFields();			GZIPInputStream	 gZIPInputStream = new GZIPInputStream(is);			 			 			BufferedReader reader = new BufferedReader(					new InputStreamReader(gZIPInputStream,"utf-8"));			String curLine = "";			while ((curLine = reader.readLine()) != null) {				returnbody += curLine;			} 			is.close(); 		} catch (Exception e) { 			//System.out.println("error:"+e.getMessage());			//e.printStackTrace();		}		return returnbody;	}	public static String getHttpRequestContentByGet(String url ,Proxy proxy, Map<String,String> headParams,boolean isGzip) { 		//System.out.println("in http get");		String returnbody = "";		try {			URL console = new URL(url);			HttpURLConnection conn = null;			if(proxy!=null){				conn = (HttpURLConnection) console						.openConnection(proxy);			}else{				conn = (HttpURLConnection) console						.openConnection();			}			conn.setConnectTimeout(5000);  			conn.setReadTimeout(5000);   			conn.setRequestMethod("GET");						 	setRequestParams(conn, headParams);			conn.connect();			InputStream is = conn.getInputStream();					/*System.out.println("heads =" + conn.getHeaderFields());			for(Object value : conn.getHeaderFields().values()){				if(value.toString().contains("LGMOID")){					cookie = value.toString();					System.out.println("value="+value);				}			}*/			BufferedReader reader = null;			if(isGzip){				GZIPInputStream	 gZIPInputStream = new GZIPInputStream(is);				 				 				reader = new BufferedReader(						new InputStreamReader(gZIPInputStream,"utf-8"));			}else{				reader = new BufferedReader(						new InputStreamReader(is,"utf-8"));			}						String curLine = "";			while ((curLine = reader.readLine()) != null) {				returnbody += curLine;			} 			is.close(); 		} catch (Exception e) { 			System.out.println("error:"+e.getMessage());			//e.printStackTrace();		}		return returnbody;	} 	public static String getHttpRequestContentByGet(String url ,Proxy proxy, Map<String,String> headParams,boolean isGzip,String encode) { 		//System.out.println("in http get");		String returnbody = "";		try {			URL console = new URL(url);			HttpURLConnection conn = null;			if(proxy!=null){				conn = (HttpURLConnection) console						.openConnection(proxy);			}else{				conn = (HttpURLConnection) console						.openConnection();			}						conn.setRequestMethod("GET");						 	setRequestParams(conn, headParams);			conn.connect();			InputStream is = conn.getInputStream();					/*System.out.println("heads =" + conn.getHeaderFields());			for(Object value : conn.getHeaderFields().values()){				if(value.toString().contains("LGMOID")){					cookie = value.toString();					System.out.println("value="+value);				}			}*/			BufferedReader reader = null;			if(isGzip){				GZIPInputStream	 gZIPInputStream = new GZIPInputStream(is);				 				 				reader = new BufferedReader(						new InputStreamReader(gZIPInputStream,encode));			}else{				reader = new BufferedReader(						new InputStreamReader(is,encode));			}						String curLine = "";			while ((curLine = reader.readLine()) != null) {				returnbody += curLine;			} 			is.close(); 		} catch (Exception e) { 			e.printStackTrace();		}		return returnbody;	}		public static String getHttpRequestContentByPost(String url, Proxy proxy, String formparams, Map<String,String> headParams,boolean isGzip) {		String returnBody = "";		InputStream is = null;		HttpURLConnection conn = null;		try {			URL console = new URL(url);			if (proxy != null) {				conn = (HttpURLConnection) console.openConnection(proxy);			} else {				conn = (HttpURLConnection) console.openConnection();			} 			conn.setDoOutput(true);			conn.setDoInput(true);			// 设定请求的方法为"POST"，默认是GET			conn.setRequestMethod("POST");			setRequestParams(conn, headParams);			byte[] data = formparams.getBytes(); 		//	conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded"); 			conn.setRequestProperty("Content-Length", String.valueOf(data.length)); 			conn.setDoOutput(true);			conn.setDoInput(true);			conn.setConnectTimeout(30000);			conn.setReadTimeout(30000);			conn.connect();		 											OutputStream output = conn.getOutputStream();			output.write(data); //			System.out.println("返回结果：" + conn.getResponseMessage());//			//			System.out.println("res header = "+conn.getHeaderFields());			is = conn.getInputStream();			BufferedReader reader = null;			if(isGzip){				GZIPInputStream	 gZIPInputStream = new GZIPInputStream(is);				reader = new BufferedReader(						new InputStreamReader(gZIPInputStream,"utf-8"));			}else{				reader = new BufferedReader(						new InputStreamReader(is,"utf-8"));			}					String curLine = "";			while ((curLine = reader.readLine()) != null) {				returnBody += curLine;			}			is.close();		} catch (Exception e) {		} finally {			if (is != null) {				try {					is.close();				} catch (IOException e) {					e.printStackTrace();				}			}			if (conn != null) {				conn.disconnect();			}		}		return returnBody;	}	 	public static String getHttpsRequestContentByPost(String url, Proxy proxy, String formparams, Map<String,String> headParams) {		String returnBody = "";		InputStream is = null;		HttpsURLConnection conn = null;		try {			SSLContext sc = SSLContext.getInstance("SSL");			// 指定信任https			sc.init(null, new TrustManager[] { new TrustAnyTrustManager() }, new java.security.SecureRandom());			URL console = new URL(url);			if (proxy != null) {				conn = (HttpsURLConnection) console.openConnection(proxy);			} else {				conn = (HttpsURLConnection) console.openConnection();			}	 		conn.setRequestMethod("POST");			conn.setDoOutput(true);			conn.setDoInput(true);			// 设定请求的方法为"POST"，默认是GET			conn.setRequestMethod("POST");			 			setRequestParams(conn, headParams);			byte[] data = formparams.getBytes(); 			//conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded"); 			//conn.setRequestProperty("Content-Length", String.valueOf(data.length)); 			conn.setConnectTimeout(30000);			conn.setReadTimeout(30000);			conn.connect();			String sessionId = "";  	        String cookieVal = "";  			String key = null;									OutputStream output = conn.getOutputStream();			output.write(data); 			System.out.println("返回结果：" + conn.getResponseMessage());						System.out.println("res=="+conn.getHeaderFields());			//cookie="";			for(List<String> value : conn.getHeaderFields().values()){				if(value.toString().contains("ticketGrantingTicketId=")){					for(String var : value){						cookie += var+";";					}				}			} 			System.out.println("cookie="+cookie);			is = conn.getInputStream();			 						BufferedReader reader = new BufferedReader(					new InputStreamReader(is,"utf-8"));			String curLine = "";			while ((curLine = reader.readLine()) != null) {				returnBody += curLine;			}			is.close();		} catch (Exception e) {			e.printStackTrace();		} finally {			if (is != null) {				try {					is.close();				} catch (IOException e) {					e.printStackTrace();				}			}			if (conn != null) {				conn.disconnect();			}		}		return returnBody;	}			public static String encode(String str, String charset) throws UnsupportedEncodingException {	    Pattern p = Pattern.compile(zhPattern);	    Matcher m = p.matcher(str);	    StringBuffer b = new StringBuffer();	    while (m.find()) {	      m.appendReplacement(b, URLEncoder.encode(m.group(0), charset));	    }	    m.appendTail(b);	    return b.toString();	  }			 	public static String getHttpsRequestContentByGet(String url, Proxy proxy, Map<String, String> headParams) {		String returnbody = "";		HttpsURLConnection conn = null;		try {			SSLContext sc = SSLContext.getInstance("SSL");			// 指定信任https			sc.init(null, new TrustManager[] { new TrustAnyTrustManager() }, new java.security.SecureRandom());			URL console = new URL(url);			if (proxy != null) {				conn = (HttpsURLConnection) console.openConnection(proxy);			} else {				conn = (HttpsURLConnection) console.openConnection();			}			// (HttpsURLConnection) console .openConnection();			conn.setSSLSocketFactory(sc.getSocketFactory());			conn.setHostnameVerifier(new TrustAnyHostnameVerifier());			conn.setRequestMethod("GET");			conn.setSSLSocketFactory(sc.getSocketFactory()); 					 	setRequestParams(conn, headParams);		conn.connect();		InputStream is = conn.getInputStream();			/*System.out.println("heads =" + conn.getHeaderFields());		for(Object value : conn.getHeaderFields().values()){			if(value.toString().contains("LGMOID")){				cookie = value.toString();				System.out.println("value="+value);			}		}*/		GZIPInputStream	 gZIPInputStream = new GZIPInputStream(is);		 		 		BufferedReader reader = new BufferedReader(				new InputStreamReader(gZIPInputStream,"gb2312"));		String curLine = "";		while ((curLine = reader.readLine()) != null) {			returnbody += curLine;		} 		is.close(); 						} catch (Exception e) {			// System.out.println("errorrrrrrrrrrrrrrrr: url:"+url+" : "+			// e.getMessage());			// e.printStackTrace();		} finally { 					}		return returnbody;	}		public static String getHttpsRequestContentByGet(String url, Proxy proxy, Map<String, String> headParams,boolean gzip,String charset) {		String returnbody = "";		HttpsURLConnection conn = null;		try {			SSLContext sc = SSLContext.getInstance("SSL");			// 指定信任https			sc.init(null, new TrustManager[] { new TrustAnyTrustManager() }, new java.security.SecureRandom());			URL console = new URL(url);			if (proxy != null) {				conn = (HttpsURLConnection) console.openConnection(proxy);			} else {				conn = (HttpsURLConnection) console.openConnection();			}			// (HttpsURLConnection) console .openConnection();			conn.setSSLSocketFactory(sc.getSocketFactory());			conn.setHostnameVerifier(new TrustAnyHostnameVerifier());			conn.setRequestMethod("GET");			conn.setSSLSocketFactory(sc.getSocketFactory()); 					 	setRequestParams(conn, headParams);		conn.connect();		InputStream is = conn.getInputStream();			/*System.out.println("heads =" + conn.getHeaderFields());		for(Object value : conn.getHeaderFields().values()){			if(value.toString().contains("LGMOID")){				cookie = value.toString();				System.out.println("value="+value);			}		}*/		InputStream	 gZIPInputStream = null;		if(gzip){			 gZIPInputStream = new GZIPInputStream(is);		}else{			gZIPInputStream = is;		}				 		 		BufferedReader reader = new BufferedReader(				new InputStreamReader(gZIPInputStream,charset));		String curLine = "";		while ((curLine = reader.readLine()) != null) {			returnbody += curLine;		} 		is.close(); 						} catch (Exception e) {			// System.out.println("errorrrrrrrrrrrrrrrr: url:"+url+" : "+			// e.getMessage());			  e.printStackTrace();		} finally { 					}		return returnbody;	}			private static void setRequestParams(URLConnection conn, Map<String, String> params) {		if (params != null) {			for (String key : params.keySet()) {				//System.out.println("key="+key+";value="+params.get(key));				conn.setRequestProperty(key, params.get(key));			}		}	}			public static void main(String[] args) throws Exception {				 				//	test();			// q=tomcat+中国			String url = "http://api.pigyoyo.com/api/v1/market/drawPrize?timestamp=1473834459000&signature=0fedd98804d2bb127934d80edf948899031bec4e";						Map<String, String> params = new HashMap<String, String>();			params.put("Accept-Language", "zh-CN,zh;q=0.8,en;q=0.6");		  params.put("Host","www.qysudu.com");			params.put("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8");			params.put("Cookie","JSESSIONID=214E76526D7036B87CAAE9E6EB757A63; Hm_lvt_471f734c320b183acb1bf53fe98166ab=1472698569; Hm_lpvt_471f734c320b183acb1bf53fe98166ab=1472721356");			  params.put("Referer",		  "http://www.qysudu.com/companys/lists?type=all&name=%25E5%2585%25AC%25E5%258F%25B8&mark=1472721354971");			params.put("Cache-Control", "max-age=0");			params.put("Connection", "keep-alive");			// conn.setInstanceFollowRedirects(false);			// params.put("If-Modified-Since","Wed, 30 Dec 2015 09:01:37 GMT");			// params.put("If-None-Match","");			// params.put("If-Modified-Since","3f5dfb0e042d11");			params.put("Upgrade-Insecure-Requests", "1");			params.put("User-Agent",					"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.87 Safari/537.36");			/*Proxy proxy  = new Proxy(Proxy.Type.HTTP,   		            new InetSocketAddress("111.177.124.144",8123 ));*/			Proxy proxy   = new Proxy(Proxy.Type.SOCKS,   		            new InetSocketAddress("206.251.244.74",9090 ));			/*proxy  = new Proxy(Proxy.Type.HTTP,   		            new InetSocketAddress("172.16.106.90", 8119));*/						//new InetSocketAddress("134.168.55.226",8080 ));		//	String body = getHttpRequestContentByGet(url, null, params);			String formparams = "keywords=湖南傻蛋&pageNo=1&param=15084947675";			int sum = 0;			for(int i=0;i<10000;i++){				sum ++;				if(sum>=50){					sum = 0;					Thread.sleep(60000);				}				JSONObject json = new JSONObject();				json.put("keywords", "公司");				json.put("pageNo", (i+1)+"");				json.put("param", "15084947675");				Map<String,String> headParams = new HashMap<String,String>();				headParams.put("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");				headParams.put("Content-Length", "78");				headParams.put("User-Agent",						"Mozilla/5.0 (X11; U; Linux i686; zh-CN; rv:1.9.1.2) Gecko/20090803");				headParams.put("Host","api.pigyoyo.com");				headParams.put("X-Requested-With","com.tencent.mm");				headParams.put("Referer","http://res.pigyoyo.com/games/yuebing/v2/index.html?proid=1Mb4crYn&code=001OKRGl04jk4g1pfPGl03NQGl0OKRG-&state=mrlong&appid=wx5dea628a281ca5d7");				headParams.put("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8");			//	headParams.put("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8");			 //projectid=1Mb4crYn&openid=o0SylxIhxTCRjyXw5VSZ5k83IBLs&mode=				String params2 = "projectid=1Mb4crYn&openid=o0SylxHdHBdzfh9FHAj129kx5gBI&mode=抽奖";				String params1 = "projectid=1Mb4crYn&openid=o0SylxIhxTCRjyXw5VSZ5k83IBLs&score=51&remark=";						params2 = URLEncoder.encode(params2);				String param3 = "projectid=1Mb4crYn&orderby=DESC&topnum=30";				//ysudu.com				try{					String body = "未中奖";					while(body.contains("未中奖")){						 body = getHttpRequestContentByPost(url, null,params2, headParams,false);						 System.out.println("body="+body);						 Thread.sleep(100);					}					/*while(true){						url = "http://api.pigyoyo.com/api/v1/gameplaydata/query?timestamp=1473837910000&signature=a179c5b5add093f3f088aa91e7d9de72ed508ad2";						String  body = getHttpRequestContentByPost(url, null,param3, headParams);						 json = JSONObject.fromObject(body);						 JSONArray array = json.getJSONArray("data");						 if(array.size()>=1){							 JSONObject obj = JSONObject.fromObject(array.get(0));							 String openid = obj.getString("openid");							 double score = obj.getDouble("score");							 if(!openid.equals("o0SylxIhxTCRjyXw5VSZ5k83IBLs")){									String url1 = "http://api.pigyoyo.com/api/v1/gameplaydata/insert?timestamp=1473839837000&signature=3f0d1feda97327694b3c2419dc9d6e5b7f0d45e1";									String newcore = (score+new Random().nextInt(50)+1)+"";									params1 = "projectid=1Mb4crYn&openid=o0SylxIhxTCRjyXw5VSZ5k83IBLs&score="+newcore+"&remark=";									//params1 = "projectid=1Mb4crYn&openid=o0SylxHdHBdzfh9FHAj129kx5gBI&score="+newcore+"&remark=";																		 body = getHttpRequestContentByPost(url, null,params2, headParams);									 System.out.println("body="+body);							 }							 						 }						 Thread.sleep(1500);					}*/									 										/*String body = "未中奖";					while(body.contains("未中奖")){						Date d = new Date();						String url1 = "http://api.pigyoyo.com/api/v1/gameplaydata/insert?timestamp=1473839837000&signature=3f0d1feda97327694b3c2419dc9d6e5b7f0d45e1";						 body = getHttpRequestContentByPost(url1, null,params1, headParams);						 System.out.println("body1="+body);						 String url2 =  "http://api.pigyoyo.com/api/v1/market/drawPrize?timestamp=1473839601000&signature=4e9e71913da3176c1e81cf1bedf336f9012912df";						 body = getHttpRequestContentByPost(url2, null,params2, headParams);						 System.out.println("body2="+body);					}*/								 					 				}catch(Exception e){					e.printStackTrace();				}												System.out.println("page="+(i+1));				//System.out.println("body = " +body);			}	}		public static  Proxy getProxy(){		try{						int index = new Random().nextInt(ips.length);			String ip = ips[index];			Proxy proxy  = new Proxy(Proxy.Type.HTTP,   		            new InetSocketAddress(ip, 10001));			//System.out.println("proxy="+proxy);			return proxy;		}catch(Exception e){			return null;		}			}		public static  HttpHost getProxy(String ip,String port){		int por = Integer.parseInt(port);		HttpHost host =new HttpHost(ip,por);		return host;			}	public static  HttpHost getHttpProxy(){		try{						int index = new Random().nextInt(ips3.length);			String ip = ips3[index].split("\\:")[0];			String port = ips3[index].split("\\:")[1];			int por = Integer.parseInt(port);			HttpHost host =new HttpHost(ip,por);			return host;		}catch(Exception e){			return null;		}			}			public static  Proxy getProxy2(){		try{						int index = new Random().nextInt(ips.length);			String ip = ips2[index].split("\\:")[0];			String port = ips2[index].split("\\:")[1];			while(port.equals("10001")){				index = new Random().nextInt(ips2.length);				  ip = ips2[index].split("\\:")[0];				  port = ips2[index].split("\\:")[1];			}			Proxy proxy  = new Proxy(Proxy.Type.HTTP,   		            new InetSocketAddress(ip, Integer.parseInt(port)));			//System.out.println("proxy="+proxy);			return proxy;		}catch(Exception e){			return null;		}			}}